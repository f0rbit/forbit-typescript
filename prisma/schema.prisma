// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String?   @unique
    emailVerified    DateTime?
    image            String?
    api_url          String?
    html_url         String?
    location         String?
    bio              String?   @db.Text
    twitter_username String?
    accounts         Account[]
    sessions         Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// User defined schema
model BlogUser {
    id              String       @id @default(uuid())
    user_name       String
    access_level    ACCESS_LEVEL @default(DEFAULT)
    last_login_ip   String?
    last_login_date DateTime?
    creation_date   DateTime     @default(now())

    posts Post[]
}

model Post {
    post_id       Int         @id @default(autoincrement())
    title         String
    content       String      @db.Text
    post_date     DateTime    @default(now())
    post_status   POST_STATUS @default(DRAFT)
    slug          String      @unique
    metadata      Json
    cover_picture String?     @db.Text

    // relation
    author_id String
    author    BlogUser @relation(fields: [author_id], references: [id])

    categories Category[]
}

model Category {
    slug          String  @id
    parent_slug   String?
    category_name String
    description   String  @db.Text
    colour        String  @db.VarChar(7)

    posts Post[]
}

model Project {
    project_id  Int            @id @default(autoincrement())
    name        String         @db.VarChar(30)
    description String         @db.Text
    repo_url    String         @db.Text
    icon_url    String         @db.Text
    status      PROJECT_STATUS @default(DEVELOPMENT)
    link_url    String         @db.Text
    link_text   String         @db.VarChar(20)
    hidden      Boolean        @default(false)

    technologies Technology[]
}

model Technology {
    name       String     @id @db.VarChar(20)
    icon_url   String?    @db.Text
    tech_group TECHNOLOGY

    projects Project[]
}

// User defined enums
enum ACCESS_LEVEL {
    DEFAULT
    MEMBER
    PREMIUM
    MODERATOR
    ADMIN
    ALL
}

enum POST_STATUS {
    PUBLISHED
    DRAFT
    HIDDEN
}

enum TECHNOLOGY {
    LANGUAGE
    TOOL
    ENVIRONMENT
    DEPLOYMENT
    SERVICE
    DATABASE
    PLATFORM
}

enum PROJECT_STATUS {
    LIVE
    FINISHED
    RELEASED
    DEVELOPMENT
    PAUSED
    STOPPED
    ABANDONED
}
